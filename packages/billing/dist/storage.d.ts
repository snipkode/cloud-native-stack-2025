import { Customer, Plan, Subscription, Invoice, Payment, UsageRecord, Metric, Coupon, Discount } from './types';
export interface StorageBackend {
    initialize(): Promise<void>;
    close(): Promise<void>;
    createCustomer(customer: Customer): Promise<void>;
    getCustomer(customerId: string): Promise<Customer | null>;
    updateCustomer(customer: Customer): Promise<void>;
    deleteCustomer(customerId: string): Promise<void>;
    listCustomers(): Promise<Customer[]>;
    createPlan(plan: Plan): Promise<void>;
    getPlan(planId: string): Promise<Plan | null>;
    updatePlan(plan: Plan): Promise<void>;
    deletePlan(planId: string): Promise<void>;
    listPlans(): Promise<Plan[]>;
    createSubscription(subscription: Subscription): Promise<void>;
    getSubscription(subscriptionId: string): Promise<Subscription | null>;
    updateSubscription(subscription: Subscription): Promise<void>;
    deleteSubscription(subscriptionId: string): Promise<void>;
    listSubscriptionsByCustomer(customerId: string): Promise<Subscription[]>;
    listSubscriptionsByPlan(planId: string): Promise<Subscription[]>;
    createInvoice(invoice: Invoice): Promise<void>;
    getInvoice(invoiceId: string): Promise<Invoice | null>;
    updateInvoice(invoice: Invoice): Promise<void>;
    deleteInvoice(invoiceId: string): Promise<void>;
    listInvoicesByCustomer(customerId: string): Promise<Invoice[]>;
    listInvoicesBySubscription(subscriptionId: string): Promise<Invoice[]>;
    createPayment(payment: Payment): Promise<void>;
    getPayment(paymentId: string): Promise<Payment | null>;
    updatePayment(payment: Payment): Promise<void>;
    listPaymentsByCustomer(customerId: string): Promise<Payment[]>;
    listPaymentsByInvoice(invoiceId: string): Promise<Payment[]>;
    createUsageRecord(usageRecord: UsageRecord): Promise<void>;
    getUsageRecord(usageRecordId: string): Promise<UsageRecord | null>;
    listUsageRecordsBySubscription(subscriptionId: string): Promise<UsageRecord[]>;
    createMetric(metric: Metric): Promise<void>;
    getMetric(metricId: string): Promise<Metric | null>;
    listMetrics(): Promise<Metric[]>;
    createCoupon(coupon: Coupon): Promise<void>;
    getCoupon(couponId: string): Promise<Coupon | null>;
    getCouponByCode(code: string): Promise<Coupon | null>;
    updateCoupon(coupon: Coupon): Promise<void>;
    listCoupons(): Promise<Coupon[]>;
    createDiscount(discount: Discount): Promise<void>;
    getDiscount(discountId: string): Promise<Discount | null>;
    listDiscountsByCustomer(customerId: string): Promise<Discount[]>;
    listDiscountsBySubscription(subscriptionId: string): Promise<Discount[]>;
}
export declare class InMemoryStorage implements StorageBackend {
    private customers;
    private plans;
    private subscriptions;
    private invoices;
    private payments;
    private usageRecords;
    private metrics;
    private coupons;
    private discounts;
    initialize(): Promise<void>;
    close(): Promise<void>;
    createCustomer(customer: Customer): Promise<void>;
    getCustomer(customerId: string): Promise<Customer | null>;
    updateCustomer(customer: Customer): Promise<void>;
    deleteCustomer(customerId: string): Promise<void>;
    listCustomers(): Promise<Customer[]>;
    createPlan(plan: Plan): Promise<void>;
    getPlan(planId: string): Promise<Plan | null>;
    updatePlan(plan: Plan): Promise<void>;
    deletePlan(planId: string): Promise<void>;
    listPlans(): Promise<Plan[]>;
    createSubscription(subscription: Subscription): Promise<void>;
    getSubscription(subscriptionId: string): Promise<Subscription | null>;
    updateSubscription(subscription: Subscription): Promise<void>;
    deleteSubscription(subscriptionId: string): Promise<void>;
    listSubscriptionsByCustomer(customerId: string): Promise<Subscription[]>;
    listSubscriptionsByPlan(planId: string): Promise<Subscription[]>;
    createInvoice(invoice: Invoice): Promise<void>;
    getInvoice(invoiceId: string): Promise<Invoice | null>;
    updateInvoice(invoice: Invoice): Promise<void>;
    deleteInvoice(invoiceId: string): Promise<void>;
    listInvoicesByCustomer(customerId: string): Promise<Invoice[]>;
    listInvoicesBySubscription(subscriptionId: string): Promise<Invoice[]>;
    createPayment(payment: Payment): Promise<void>;
    getPayment(paymentId: string): Promise<Payment | null>;
    updatePayment(payment: Payment): Promise<void>;
    listPaymentsByCustomer(customerId: string): Promise<Payment[]>;
    listPaymentsByInvoice(invoiceId: string): Promise<Payment[]>;
    createUsageRecord(usageRecord: UsageRecord): Promise<void>;
    getUsageRecord(usageRecordId: string): Promise<UsageRecord | null>;
    listUsageRecordsBySubscription(subscriptionId: string): Promise<UsageRecord[]>;
    createMetric(metric: Metric): Promise<void>;
    getMetric(metricId: string): Promise<Metric | null>;
    listMetrics(): Promise<Metric[]>;
    createCoupon(coupon: Coupon): Promise<void>;
    getCoupon(couponId: string): Promise<Coupon | null>;
    getCouponByCode(code: string): Promise<Coupon | null>;
    updateCoupon(coupon: Coupon): Promise<void>;
    listCoupons(): Promise<Coupon[]>;
    createDiscount(discount: Discount): Promise<void>;
    getDiscount(discountId: string): Promise<Discount | null>;
    listDiscountsByCustomer(customerId: string): Promise<Discount[]>;
    listDiscountsBySubscription(subscriptionId: string): Promise<Discount[]>;
}
//# sourceMappingURL=storage.d.ts.map